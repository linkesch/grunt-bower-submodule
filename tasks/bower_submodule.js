/*
 * grunt-bower-submodule
 * https://github.com/mellors/grunt-bower-submodule
 *
 * Copyright (c) 2013 Marcel Mellor
 * Licensed under the MIT license.
 */

'use strict';


var sys = require('sys'),
    exec = require('child_process').exec;

module.exports = function(grunt) {


  grunt.registerMultiTask('bower_submodule', 'Installs all dependencies of different bower.json\'s inside a project', function() {
    // Merge task-specific and/or target-specific options with these defaults.
    var options = this.options({
        targetDir: 'vendor/bower_submodule',
        dev: false
    }),
    taskCompleted = this.async(),
    rootDir = process.cwd();

    //Use bower.json in the root directory as boilerplate for new bwer file
    var bower_submodule = grunt.file.readJSON('bower.json');
    bower_submodule.description = 'This  file has been generated by grunt-bower-submodule';
    bower_submodule.dependencies = {};
    bower_submodule.devDependencies = {};

    // Find all bowser.json's
    var files = grunt.file.expand(
            'bower.json',
            '**/bower.json',
            '!**/bower_components/**',
            '!**/test/**',
            '!**/tests/**',
            '!**/build/**',
            '!**/' + options.targetDir + '/**'
        );

    files.forEach(function(path){
        try {
            var config = grunt.file.readJSON(path);
            grunt.log.writeln('Parsing ' + path);
            for(var p in config.dependencies){
                var info = config.dependencies[p].split('#'),
                    packageName = info[1] ? info[0] : '',
                    version = info[1] ? '#' + info[1] : '*';
                bower_submodule.dependencies[p] = packageName + version;
                grunt.log.writeln('Detected ' + p + ' => ' + bower_submodule.dependencies[p]);
            }

            if (options.dev) {
                for(var p in config.devDependencies){
                    var info = config.devDependencies[p].split('#'),
                        packageName = info[1] ? info[0] : '',
                        version = info[1] ? '#' + info[1] : '*';
                    bower_submodule.devDependencies[p] = packageName + version;
                    grunt.log.writeln('Detected ' + p + ' => ' + bower_submodule.devDependencies[p]);
                }
            }
        }
        catch(e){
            grunt.log.writeln(e);
        }
    });

    //Create target dir
    grunt.file.mkdir(options.targetDir);
    process.chdir(options.targetDir); //Do not use grunt.setBase as it will have no impact toe exec command


    //Create bower json
    grunt.file.write('bower.json', JSON.stringify(bower_submodule, null, 3));

    //Do not use the bower API, as it it's not possible to change the working directory
        exec("bower cache clean --allow-root", function (error, stdout, stderr) {
        if (error !== null) {
          console.log('exec error: ' + error);
        }
        else {
            exec("bower install --allow-root", function (error, stdout, stderr) {
                if (error !== null) {
                  console.log('exec error: ' + error);
                }
                else {
                    exec("bower update --allow-root", function (error, stdout, stderr) {
                        if (error !== null) {
                          console.log('exec error: ' + error);
                        }
                        else {
                            grunt.log.writeln('All packages have been installed');
                        }
                        //Undo cwd change
                        process.chdir(rootDir);
                        taskCompleted();
                    });
                }
            });
        }
    });

  });

};
